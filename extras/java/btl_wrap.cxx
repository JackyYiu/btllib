/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#define SWIG_FILE_WITH_INIT
#include "sequence.h"


#include <string>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1npos_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = btl::Sequence::npos;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_new_1Sequence_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (btl::Sequence *)new btl::Sequence();
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_new_1Sequence_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = 0 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btl::Sequence const & reference is null");
    return 0;
  } 
  result = (btl::Sequence *)new btl::Sequence((btl::Sequence const &)*arg1);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_new_1Sequence_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string arg1 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (btl::Sequence *)new btl::Sequence(arg1);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_new_1Sequence_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btl::Sequence const & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (btl::Sequence *)new btl::Sequence((btl::Sequence const &)*arg1,arg2,arg3);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_new_1Sequence_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = 0 ;
  size_t arg2 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btl::Sequence const & reference is null");
    return 0;
  } 
  arg2 = (size_t)jarg2; 
  result = (btl::Sequence *)new btl::Sequence((btl::Sequence const &)*arg1,arg2);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_new_1Sequence_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  size_t arg2 ;
  size_t arg3 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (btl::Sequence *)new btl::Sequence((std::string const &)*arg1,arg2,arg3);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_new_1Sequence_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  size_t arg2 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (size_t)jarg2; 
  result = (btl::Sequence *)new btl::Sequence((std::string const &)*arg1,arg2);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_new_1Sequence_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jchar jarg2) {
  jlong jresult = 0 ;
  size_t arg1 ;
  char arg2 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  arg2 = (char)jarg2; 
  result = (btl::Sequence *)new btl::Sequence(arg1,arg2);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_btlJNI_delete_1Sequence(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(btl::Sequence **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  result = (arg1)->begin();
  *(btl::Sequence::iterator **)&jresult = new btl::Sequence::iterator((const btl::Sequence::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  result = (arg1)->end();
  *(btl::Sequence::iterator **)&jresult = new btl::Sequence::iterator((const btl::Sequence::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1rbegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence::reverse_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  result = (arg1)->rbegin();
  *(btl::Sequence::reverse_iterator **)&jresult = new btl::Sequence::reverse_iterator((const btl::Sequence::reverse_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1rend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence::reverse_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  result = (arg1)->rend();
  *(btl::Sequence::reverse_iterator **)&jresult = new btl::Sequence::reverse_iterator((const btl::Sequence::reverse_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1cbegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence::const_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  result = ((btl::Sequence const *)arg1)->cbegin();
  *(btl::Sequence::const_iterator **)&jresult = new btl::Sequence::const_iterator((const btl::Sequence::const_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1cend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence::const_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  result = ((btl::Sequence const *)arg1)->cend();
  *(btl::Sequence::const_iterator **)&jresult = new btl::Sequence::const_iterator((const btl::Sequence::const_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1crbegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence::const_reverse_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  result = ((btl::Sequence const *)arg1)->crbegin();
  *(btl::Sequence::const_reverse_iterator **)&jresult = new btl::Sequence::const_reverse_iterator((const btl::Sequence::const_reverse_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1crend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence::const_reverse_iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  result = ((btl::Sequence const *)arg1)->crend();
  *(btl::Sequence::const_reverse_iterator **)&jresult = new btl::Sequence::const_reverse_iterator((const btl::Sequence::const_reverse_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  result = ((btl::Sequence const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1length(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  result = ((btl::Sequence const *)arg1)->length();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1max_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  result = ((btl::Sequence const *)arg1)->max_size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_btlJNI_Sequence_1resize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_btlJNI_Sequence_1resize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jchar jarg3) {
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  size_t arg2 ;
  char arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (char)jarg3; 
  (arg1)->resize(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  result = ((btl::Sequence const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_btlJNI_Sequence_1reserve_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void JNICALL Java_btlJNI_Sequence_1reserve_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  (arg1)->reserve();
}


SWIGEXPORT void JNICALL Java_btlJNI_Sequence_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_btlJNI_Sequence_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  result = (bool)((btl::Sequence const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_btlJNI_Sequence_1shrink_1to_1fit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  (arg1)->shrink_to_fit();
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< btl::Sequence::Base > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (arg1)->at(arg2);
  *(btl::Sequence::Base **)&jresult = new btl::Sequence::Base((const btl::Sequence::Base &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  SwigValueWrapper< btl::Sequence::Base > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  result = (arg1)->back();
  *(btl::Sequence::Base **)&jresult = new btl::Sequence::Base((const btl::Sequence::Base &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  SwigValueWrapper< btl::Sequence::Base > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  result = (arg1)->front();
  *(btl::Sequence::Base **)&jresult = new btl::Sequence::Base((const btl::Sequence::Base &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1add_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence *arg2 = 0 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = *(btl::Sequence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btl::Sequence const & reference is null");
    return 0;
  } 
  result = (btl::Sequence *) &(arg1)->operator +=((btl::Sequence const &)*arg2);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1add_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  std::string *arg2 = 0 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (btl::Sequence *) &(arg1)->operator +=((std::string const &)*arg2);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1add_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  char arg2 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (char)jarg2; 
  result = (btl::Sequence *) &(arg1)->operator +=(arg2);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence *arg2 = 0 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = *(btl::Sequence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btl::Sequence const & reference is null");
    return 0;
  } 
  result = (btl::Sequence *) &(arg1)->append((btl::Sequence const &)*arg2);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = *(btl::Sequence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btl::Sequence const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (btl::Sequence *) &(arg1)->append((btl::Sequence const &)*arg2,arg3,arg4);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1append_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  std::string *arg2 = 0 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (btl::Sequence *) &(arg1)->append((std::string const &)*arg2);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1append_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (btl::Sequence *) &(arg1)->append((std::string const &)*arg2,arg3,arg4);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1append_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  result = (btl::Sequence *) &(arg1)->append((char const *)arg2,arg3);
  *(btl::Sequence **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1append_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jchar jarg3) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  size_t arg2 ;
  char arg3 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (char)jarg3; 
  result = (btl::Sequence *) &(arg1)->append(arg2,arg3);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_btlJNI_Sequence_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (char)jarg2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1assign_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence *arg2 = 0 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = *(btl::Sequence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btl::Sequence const & reference is null");
    return 0;
  } 
  result = (btl::Sequence *) &(arg1)->assign((btl::Sequence const &)*arg2);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1assign_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = *(btl::Sequence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btl::Sequence const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (btl::Sequence *) &(arg1)->assign((btl::Sequence const &)*arg2,arg3,arg4);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1assign_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence *arg2 = 0 ;
  size_t arg3 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = *(btl::Sequence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btl::Sequence const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  result = (btl::Sequence *) &(arg1)->assign((btl::Sequence const &)*arg2,arg3);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1assign_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  std::string *arg2 = 0 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (btl::Sequence *) &(arg1)->assign((std::string const &)*arg2);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1assign_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (btl::Sequence *) &(arg1)->assign((std::string const &)*arg2,arg3,arg4);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1assign_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (size_t)jarg3; 
  result = (btl::Sequence *) &(arg1)->assign((std::string const &)*arg2,arg3);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1assign_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jchar jarg3) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  size_t arg2 ;
  char arg3 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (char)jarg3; 
  result = (btl::Sequence *) &(arg1)->assign(arg2,arg3);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  size_t arg2 ;
  btl::Sequence *arg3 = 0 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(btl::Sequence **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btl::Sequence const & reference is null");
    return 0;
  } 
  result = (btl::Sequence *) &(arg1)->insert(arg2,(btl::Sequence const &)*arg3);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  size_t arg2 ;
  btl::Sequence *arg3 = 0 ;
  size_t arg4 ;
  size_t arg5 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(btl::Sequence **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btl::Sequence const & reference is null");
    return 0;
  } 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  result = (btl::Sequence *) &(arg1)->insert(arg2,(btl::Sequence const &)*arg3,arg4,arg5);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1insert_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  size_t arg2 ;
  btl::Sequence *arg3 = 0 ;
  size_t arg4 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(btl::Sequence **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btl::Sequence const & reference is null");
    return 0;
  } 
  arg4 = (size_t)jarg4; 
  result = (btl::Sequence *) &(arg1)->insert(arg2,(btl::Sequence const &)*arg3,arg4);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1insert_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  size_t arg2 ;
  std::string *arg3 = 0 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (btl::Sequence *) &(arg1)->insert(arg2,(std::string const &)*arg3);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1insert_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  size_t arg2 ;
  std::string *arg3 = 0 ;
  size_t arg4 ;
  size_t arg5 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  result = (btl::Sequence *) &(arg1)->insert(arg2,(std::string const &)*arg3,arg4,arg5);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1insert_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  size_t arg2 ;
  std::string *arg3 = 0 ;
  size_t arg4 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (size_t)jarg4; 
  result = (btl::Sequence *) &(arg1)->insert(arg2,(std::string const &)*arg3,arg4);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1insert_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jchar jarg4) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  char arg4 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (char)jarg4; 
  result = (btl::Sequence *) &(arg1)->insert(arg2,arg3,arg4);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1insert_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jchar jarg4) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence::const_iterator arg2 ;
  size_t arg3 ;
  char arg4 ;
  btl::Sequence::const_iterator *argp2 ;
  btl::Sequence::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  argp2 = *(btl::Sequence::const_iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null btl::Sequence::const_iterator");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (size_t)jarg3; 
  arg4 = (char)jarg4; 
  result = (arg1)->insert(arg2,arg3,arg4);
  *(btl::Sequence::iterator **)&jresult = new btl::Sequence::iterator((const btl::Sequence::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1insert_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jchar jarg3) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence::const_iterator arg2 ;
  char arg3 ;
  btl::Sequence::const_iterator *argp2 ;
  btl::Sequence::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  argp2 = *(btl::Sequence::const_iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null btl::Sequence::const_iterator");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (char)jarg3; 
  result = (arg1)->insert(arg2,arg3);
  *(btl::Sequence::iterator **)&jresult = new btl::Sequence::iterator((const btl::Sequence::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1erase_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (btl::Sequence *) &(arg1)->erase(arg2,arg3);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1erase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  size_t arg2 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (btl::Sequence *) &(arg1)->erase(arg2);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1erase_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  result = (btl::Sequence *) &(arg1)->erase();
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1erase_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence::iterator arg2 ;
  btl::Sequence::iterator *argp2 ;
  btl::Sequence::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  argp2 = *(btl::Sequence::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null btl::Sequence::iterator");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->erase(arg2);
  *(btl::Sequence::iterator **)&jresult = new btl::Sequence::iterator((const btl::Sequence::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1erase_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence::iterator arg2 ;
  btl::Sequence::iterator arg3 ;
  btl::Sequence::iterator *argp2 ;
  btl::Sequence::iterator *argp3 ;
  btl::Sequence::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  argp2 = *(btl::Sequence::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null btl::Sequence::iterator");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(btl::Sequence::iterator **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null btl::Sequence::iterator");
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->erase(arg2,arg3);
  *(btl::Sequence::iterator **)&jresult = new btl::Sequence::iterator((const btl::Sequence::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1replace_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  btl::Sequence *arg4 = 0 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = *(btl::Sequence **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btl::Sequence const & reference is null");
    return 0;
  } 
  result = (btl::Sequence *) &(arg1)->replace(arg2,arg3,(btl::Sequence const &)*arg4);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1replace_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (btl::Sequence *) &(arg1)->replace(arg2,arg3,(std::string const &)*arg4);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1replace_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence::const_iterator arg2 ;
  btl::Sequence::const_iterator arg3 ;
  btl::Sequence *arg4 = 0 ;
  btl::Sequence::const_iterator *argp2 ;
  btl::Sequence::const_iterator *argp3 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(btl::Sequence **)&jarg1; 
  argp2 = *(btl::Sequence::const_iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null btl::Sequence::const_iterator");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(btl::Sequence::const_iterator **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null btl::Sequence::const_iterator");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(btl::Sequence **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btl::Sequence const & reference is null");
    return 0;
  } 
  result = (btl::Sequence *) &(arg1)->replace(arg2,arg3,(btl::Sequence const &)*arg4);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1replace_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence::const_iterator arg2 ;
  btl::Sequence::const_iterator arg3 ;
  std::string *arg4 = 0 ;
  btl::Sequence::const_iterator *argp2 ;
  btl::Sequence::const_iterator *argp3 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  argp2 = *(btl::Sequence::const_iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null btl::Sequence::const_iterator");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(btl::Sequence::const_iterator **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null btl::Sequence::const_iterator");
    return 0;
  }
  arg3 = *argp3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (btl::Sequence *) &(arg1)->replace(arg2,arg3,(std::string const &)*arg4);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1replace_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  btl::Sequence *arg4 = 0 ;
  size_t arg5 ;
  size_t arg6 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = *(btl::Sequence **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btl::Sequence const & reference is null");
    return 0;
  } 
  arg5 = (size_t)jarg5; 
  arg6 = (size_t)jarg6; 
  result = (btl::Sequence *) &(arg1)->replace(arg2,arg3,(btl::Sequence const &)*arg4,arg5,arg6);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1replace_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  btl::Sequence *arg4 = 0 ;
  size_t arg5 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = *(btl::Sequence **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btl::Sequence const & reference is null");
    return 0;
  } 
  arg5 = (size_t)jarg5; 
  result = (btl::Sequence *) &(arg1)->replace(arg2,arg3,(btl::Sequence const &)*arg4,arg5);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1replace_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jstring jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  size_t arg5 ;
  size_t arg6 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (size_t)jarg5; 
  arg6 = (size_t)jarg6; 
  result = (btl::Sequence *) &(arg1)->replace(arg2,arg3,(std::string const &)*arg4,arg5,arg6);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1replace_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jstring jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  size_t arg5 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (size_t)jarg5; 
  result = (btl::Sequence *) &(arg1)->replace(arg2,arg3,(std::string const &)*arg4,arg5);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1replace_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jstring jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence::const_iterator arg2 ;
  btl::Sequence::const_iterator arg3 ;
  char *arg4 = (char *) 0 ;
  size_t arg5 ;
  btl::Sequence::const_iterator *argp2 ;
  btl::Sequence::const_iterator *argp3 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  argp2 = *(btl::Sequence::const_iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null btl::Sequence::const_iterator");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(btl::Sequence::const_iterator **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null btl::Sequence::const_iterator");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (size_t)jarg5; 
  result = (btl::Sequence *) &(arg1)->replace(arg2,arg3,(char const *)arg4,arg5);
  *(btl::Sequence **)&jresult = result; 
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1replace_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jchar jarg5) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  char arg5 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (char)jarg5; 
  result = (btl::Sequence *) &(arg1)->replace(arg2,arg3,arg4,arg5);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1replace_1_1SWIG_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jchar jarg5) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence::const_iterator arg2 ;
  btl::Sequence::const_iterator arg3 ;
  size_t arg4 ;
  char arg5 ;
  btl::Sequence::const_iterator *argp2 ;
  btl::Sequence::const_iterator *argp3 ;
  btl::Sequence *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  argp2 = *(btl::Sequence::const_iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null btl::Sequence::const_iterator");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(btl::Sequence::const_iterator **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null btl::Sequence::const_iterator");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (size_t)jarg4; 
  arg5 = (char)jarg5; 
  result = (btl::Sequence *) &(arg1)->replace(arg2,arg3,arg4,arg5);
  *(btl::Sequence **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_btlJNI_Sequence_1swap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = *(btl::Sequence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btl::Sequence & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void JNICALL Java_btlJNI_Sequence_1swap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void JNICALL Java_btlJNI_Sequence_1pop_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT jstring JNICALL Java_btlJNI_Sequence_1c_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  result = (char *)((btl::Sequence const *)arg1)->c_str();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_btlJNI_Sequence_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  result = (char *)((btl::Sequence const *)arg1)->data();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1get_1allocator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence::allocator_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  result = ((btl::Sequence const *)arg1)->get_allocator();
  *(btl::Sequence::allocator_type **)&jresult = new btl::Sequence::allocator_type((const btl::Sequence::allocator_type &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1copy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  result = ((btl::Sequence const *)arg1)->copy(arg2,arg3,arg4);
  jresult = (jlong)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1copy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  result = ((btl::Sequence const *)arg1)->copy(arg2,arg3);
  jresult = (jlong)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1find_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence *arg2 = 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = *(btl::Sequence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btl::Sequence const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  result = ((btl::Sequence const *)arg1)->find((btl::Sequence const &)*arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1find_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence *arg2 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = *(btl::Sequence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btl::Sequence const & reference is null");
    return 0;
  } 
  result = ((btl::Sequence const *)arg1)->find((btl::Sequence const &)*arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1find_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (size_t)jarg3; 
  result = ((btl::Sequence const *)arg1)->find((std::string const &)*arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1find_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  std::string *arg2 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((btl::Sequence const *)arg1)->find((std::string const &)*arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1find_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  btl::Sequence::size_type arg4 ;
  btl::Sequence::size_type *argp4 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  argp4 = *(btl::Sequence::size_type **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null btl::Sequence::size_type");
    return 0;
  }
  arg4 = *argp4; 
  result = ((btl::Sequence const *)arg1)->find((char const *)arg2,arg3,arg4);
  jresult = (jlong)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1find_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  char arg2 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (char)jarg2; 
  arg3 = (size_t)jarg3; 
  result = ((btl::Sequence const *)arg1)->find(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1find_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  char arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (char)jarg2; 
  result = ((btl::Sequence const *)arg1)->find(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1rfind_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence *arg2 = 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = *(btl::Sequence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btl::Sequence const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  result = ((btl::Sequence const *)arg1)->rfind((btl::Sequence const &)*arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1rfind_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence *arg2 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = *(btl::Sequence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btl::Sequence const & reference is null");
    return 0;
  } 
  result = ((btl::Sequence const *)arg1)->rfind((btl::Sequence const &)*arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1rfind_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (size_t)jarg3; 
  result = ((btl::Sequence const *)arg1)->rfind((std::string const &)*arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1rfind_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  std::string *arg2 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((btl::Sequence const *)arg1)->rfind((std::string const &)*arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1rfind_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  result = ((btl::Sequence const *)arg1)->rfind((char const *)arg2,arg3,arg4);
  jresult = (jlong)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1rfind_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  char arg2 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (char)jarg2; 
  arg3 = (size_t)jarg3; 
  result = ((btl::Sequence const *)arg1)->rfind(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1rfind_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  char arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (char)jarg2; 
  result = ((btl::Sequence const *)arg1)->rfind(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1find_1first_1of_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence *arg2 = 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = *(btl::Sequence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btl::Sequence const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  result = ((btl::Sequence const *)arg1)->find_first_of((btl::Sequence const &)*arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1find_1first_1of_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence *arg2 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = *(btl::Sequence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btl::Sequence const & reference is null");
    return 0;
  } 
  result = ((btl::Sequence const *)arg1)->find_first_of((btl::Sequence const &)*arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1find_1first_1of_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (size_t)jarg3; 
  result = ((btl::Sequence const *)arg1)->find_first_of((std::string const &)*arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1find_1first_1of_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  std::string *arg2 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((btl::Sequence const *)arg1)->find_first_of((std::string const &)*arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1find_1first_1of_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  result = ((btl::Sequence const *)arg1)->find_first_of((char const *)arg2,arg3,arg4);
  jresult = (jlong)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1find_1first_1of_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  char arg2 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (char)jarg2; 
  arg3 = (size_t)jarg3; 
  result = ((btl::Sequence const *)arg1)->find_first_of(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1find_1first_1of_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  char arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (char)jarg2; 
  result = ((btl::Sequence const *)arg1)->find_first_of(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1find_1last_1of_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence *arg2 = 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = *(btl::Sequence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btl::Sequence const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  result = ((btl::Sequence const *)arg1)->find_last_of((btl::Sequence const &)*arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1find_1last_1of_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence *arg2 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = *(btl::Sequence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btl::Sequence const & reference is null");
    return 0;
  } 
  result = ((btl::Sequence const *)arg1)->find_last_of((btl::Sequence const &)*arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1find_1last_1of_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (size_t)jarg3; 
  result = ((btl::Sequence const *)arg1)->find_last_of((std::string const &)*arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1find_1last_1of_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  std::string *arg2 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((btl::Sequence const *)arg1)->find_last_of((std::string const &)*arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1find_1last_1of_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  result = ((btl::Sequence const *)arg1)->find_last_of((char const *)arg2,arg3,arg4);
  jresult = (jlong)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1find_1last_1of_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  char arg2 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (char)jarg2; 
  arg3 = (size_t)jarg3; 
  result = ((btl::Sequence const *)arg1)->find_last_of(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1find_1last_1of_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  char arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (char)jarg2; 
  result = ((btl::Sequence const *)arg1)->find_last_of(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1find_1first_1not_1of_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence *arg2 = 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = *(btl::Sequence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btl::Sequence const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  result = ((btl::Sequence const *)arg1)->find_first_not_of((btl::Sequence const &)*arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1find_1first_1not_1of_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence *arg2 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = *(btl::Sequence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btl::Sequence const & reference is null");
    return 0;
  } 
  result = ((btl::Sequence const *)arg1)->find_first_not_of((btl::Sequence const &)*arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1find_1first_1not_1of_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (size_t)jarg3; 
  result = ((btl::Sequence const *)arg1)->find_first_not_of((std::string const &)*arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1find_1first_1not_1of_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  std::string *arg2 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((btl::Sequence const *)arg1)->find_first_not_of((std::string const &)*arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1find_1first_1not_1of_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  result = ((btl::Sequence const *)arg1)->find_first_not_of((char const *)arg2,arg3,arg4);
  jresult = (jlong)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1find_1first_1not_1of_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  char arg2 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (char)jarg2; 
  arg3 = (size_t)jarg3; 
  result = ((btl::Sequence const *)arg1)->find_first_not_of(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1find_1first_1not_1of_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  char arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (char)jarg2; 
  result = ((btl::Sequence const *)arg1)->find_first_not_of(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1find_1last_1not_1of_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence *arg2 = 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = *(btl::Sequence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btl::Sequence const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  result = ((btl::Sequence const *)arg1)->find_last_not_of((btl::Sequence const &)*arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1find_1last_1not_1of_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence *arg2 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = *(btl::Sequence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btl::Sequence const & reference is null");
    return 0;
  } 
  result = ((btl::Sequence const *)arg1)->find_last_not_of((btl::Sequence const &)*arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1find_1last_1not_1of_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (size_t)jarg3; 
  result = ((btl::Sequence const *)arg1)->find_last_not_of((std::string const &)*arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1find_1last_1not_1of_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  std::string *arg2 = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((btl::Sequence const *)arg1)->find_last_not_of((std::string const &)*arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1find_1last_1not_1of_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  result = ((btl::Sequence const *)arg1)->find_last_not_of((char const *)arg2,arg3,arg4);
  jresult = (jlong)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1find_1last_1not_1of_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  char arg2 ;
  size_t arg3 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (char)jarg2; 
  arg3 = (size_t)jarg3; 
  result = ((btl::Sequence const *)arg1)->find_last_not_of(arg2,arg3);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1find_1last_1not_1of_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  char arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (char)jarg2; 
  result = ((btl::Sequence const *)arg1)->find_last_not_of(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1substr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  btl::Sequence result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = ((btl::Sequence const *)arg1)->substr(arg2,arg3);
  *(btl::Sequence **)&jresult = new btl::Sequence((const btl::Sequence &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1substr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  size_t arg2 ;
  btl::Sequence result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((btl::Sequence const *)arg1)->substr(arg2);
  *(btl::Sequence **)&jresult = new btl::Sequence((const btl::Sequence &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1substr_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  result = ((btl::Sequence const *)arg1)->substr();
  *(btl::Sequence **)&jresult = new btl::Sequence((const btl::Sequence &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_btlJNI_Sequence_1compare_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = *(btl::Sequence **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btl::Sequence const & reference is null");
    return 0;
  } 
  result = (int)((btl::Sequence const *)arg1)->compare((btl::Sequence const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_btlJNI_Sequence_1compare_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (int)((btl::Sequence const *)arg1)->compare((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_btlJNI_Sequence_1compare_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  btl::Sequence *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = *(btl::Sequence **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btl::Sequence const & reference is null");
    return 0;
  } 
  result = (int)((btl::Sequence const *)arg1)->compare(arg2,arg3,(btl::Sequence const &)*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_btlJNI_Sequence_1compare_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jstring jarg4) {
  jint jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (int)((btl::Sequence const *)arg1)->compare(arg2,arg3,(std::string const &)*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_btlJNI_Sequence_1compare_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  btl::Sequence *arg4 = 0 ;
  size_t arg5 ;
  size_t arg6 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = *(btl::Sequence **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btl::Sequence const & reference is null");
    return 0;
  } 
  arg5 = (size_t)jarg5; 
  arg6 = (size_t)jarg6; 
  result = (int)((btl::Sequence const *)arg1)->compare(arg2,arg3,(btl::Sequence const &)*arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_btlJNI_Sequence_1compare_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jint jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  btl::Sequence *arg4 = 0 ;
  size_t arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = *(btl::Sequence **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btl::Sequence const & reference is null");
    return 0;
  } 
  arg5 = (size_t)jarg5; 
  result = (int)((btl::Sequence const *)arg1)->compare(arg2,arg3,(btl::Sequence const &)*arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_btlJNI_Sequence_1compare_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jstring jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  size_t arg5 ;
  size_t arg6 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (size_t)jarg5; 
  arg6 = (size_t)jarg6; 
  result = (int)((btl::Sequence const *)arg1)->compare(arg2,arg3,(std::string const &)*arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_btlJNI_Sequence_1compare_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jstring jarg4, jlong jarg5) {
  jint jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::string *arg4 = 0 ;
  size_t arg5 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  std::string arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (size_t)jarg5; 
  result = (int)((btl::Sequence const *)arg1)->compare(arg2,arg3,(std::string const &)*arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_btlJNI_Sequence_1reverseComplement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  (arg1)->reverseComplement();
}


SWIGEXPORT jlong JNICALL Java_btlJNI_Sequence_1getReverseComplement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  btl::Sequence *arg1 = (btl::Sequence *) 0 ;
  btl::Sequence result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence **)&jarg1; 
  result = (arg1)->getReverseComplement();
  *(btl::Sequence **)&jresult = new btl::Sequence((const btl::Sequence &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_btlJNI_new_1Base(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  btl::Sequence::Base *arg1 = 0 ;
  btl::Sequence::Base *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence::Base **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "btl::Sequence::Base const & reference is null");
    return 0;
  } 
  result = (btl::Sequence::Base *)new btl::Sequence::Base((btl::Sequence::Base const &)*arg1);
  *(btl::Sequence::Base **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_btlJNI_Base_1complement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  btl::Sequence::Base *arg1 = (btl::Sequence::Base *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence::Base **)&jarg1; 
  (arg1)->complement();
}


SWIGEXPORT jchar JNICALL Java_btlJNI_Base_1getComplement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  btl::Sequence::Base *arg1 = (btl::Sequence::Base *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence::Base **)&jarg1; 
  result = (char)((btl::Sequence::Base const *)arg1)->getComplement();
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_btlJNI_Base_1validate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  btl::Sequence::Base *arg1 = (btl::Sequence::Base *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence::Base **)&jarg1; 
  (arg1)->validate();
}


SWIGEXPORT void JNICALL Java_btlJNI_Base_1capitalize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  btl::Sequence::Base *arg1 = (btl::Sequence::Base *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(btl::Sequence::Base **)&jarg1; 
  (arg1)->capitalize();
}


SWIGEXPORT void JNICALL Java_btlJNI_Base_1validate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jchar jarg1) {
  char arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (char)jarg1; 
  btl::Sequence::Base::validate(arg1);
}


SWIGEXPORT jchar JNICALL Java_btlJNI_Base_1capitalize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jchar jarg1) {
  jchar jresult = 0 ;
  char arg1 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (char)jarg1; 
  result = (char)btl::Sequence::Base::capitalize(arg1);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_btlJNI_delete_1Base(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  btl::Sequence::Base *arg1 = (btl::Sequence::Base *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(btl::Sequence::Base **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

