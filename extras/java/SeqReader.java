/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class SeqReader {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected SeqReader(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(SeqReader obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        btlJNI.delete_SeqReader(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public SeqReader(String input_path, int flags) {
    this(btlJNI.new_SeqReader__SWIG_0(input_path, flags), true);
  }

  public SeqReader(String input_path) {
    this(btlJNI.new_SeqReader__SWIG_1(input_path), true);
  }

  public boolean flagFoldCase() {
    return btlJNI.SeqReader_flagFoldCase(swigCPtr, this);
  }

  public boolean flagConvertQual() {
    return btlJNI.SeqReader_flagConvertQual(swigCPtr, this);
  }

  public boolean flagTrimMasked() {
    return btlJNI.SeqReader_flagTrimMasked(swigCPtr, this);
  }

  public SeqReader.Format get_format() {
    return SeqReader.Format.swigToEnum(btlJNI.SeqReader_get_format(swigCPtr, this));
  }

  public boolean eof() {
    return btlJNI.SeqReader_eof(swigCPtr, this);
  }

  public boolean fail() {
    return btlJNI.SeqReader_fail(swigCPtr, this);
  }

  public int peek() {
    return btlJNI.SeqReader_peek(swigCPtr, this);
  }

  public String get_qual() {
    return btlJNI.SeqReader_get_qual(swigCPtr, this);
  }

  public final static class Flags {
    public final static SeqReader.Flags FOLD_CASE = new SeqReader.Flags("FOLD_CASE", btlJNI.SeqReader_FOLD_CASE_get());
    public final static SeqReader.Flags NO_FOLD_CASE = new SeqReader.Flags("NO_FOLD_CASE", btlJNI.SeqReader_NO_FOLD_CASE_get());
    public final static SeqReader.Flags NO_CONVERT_QUALITY = new SeqReader.Flags("NO_CONVERT_QUALITY", btlJNI.SeqReader_NO_CONVERT_QUALITY_get());
    public final static SeqReader.Flags CONVERT_QUALITY = new SeqReader.Flags("CONVERT_QUALITY", btlJNI.SeqReader_CONVERT_QUALITY_get());
    public final static SeqReader.Flags NO_TRIM_MASKED = new SeqReader.Flags("NO_TRIM_MASKED", btlJNI.SeqReader_NO_TRIM_MASKED_get());
    public final static SeqReader.Flags TRIM_MASKED = new SeqReader.Flags("TRIM_MASKED", btlJNI.SeqReader_TRIM_MASKED_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Flags swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Flags.class + " with value " + swigValue);
    }

    private Flags(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Flags(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Flags(String swigName, Flags swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Flags[] swigValues = { FOLD_CASE, NO_FOLD_CASE, NO_CONVERT_QUALITY, CONVERT_QUALITY, NO_TRIM_MASKED, TRIM_MASKED };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class Format {
    public final static SeqReader.Format UNKNOWN = new SeqReader.Format("UNKNOWN");
    public final static SeqReader.Format FASTA = new SeqReader.Format("FASTA");
    public final static SeqReader.Format FASTQ = new SeqReader.Format("FASTQ");
    public final static SeqReader.Format SAM = new SeqReader.Format("SAM");
    public final static SeqReader.Format INVALID = new SeqReader.Format("INVALID");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Format swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Format.class + " with value " + swigValue);
    }

    private Format(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Format(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Format(String swigName, Format swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Format[] swigValues = { UNKNOWN, FASTA, FASTQ, SAM, INVALID };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
