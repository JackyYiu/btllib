/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package btllib;

public class SeedRollingHash extends RollingHash {
  private transient long swigCPtr;

  protected SeedRollingHash(long cPtr, boolean cMemoryOwn) {
    super(btllibJNI.SeedRollingHash_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(SeedRollingHash obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        btllibJNI.delete_SeedRollingHash(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public SeedRollingHash(String seq, long seq_len, long k, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t seeds, long hash_num_per_seed) {
    this(btllibJNI.new_SeedRollingHash__SWIG_0(seq, seq_len, k, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t.getCPtr(seeds), hash_num_per_seed), true);
  }

  public SeedRollingHash(String seq, long k, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t seeds, long hash_num_per_seed) {
    this(btllibJNI.new_SeedRollingHash__SWIG_1(seq, k, SWIGTYPE_p_std__vectorT_std__vectorT_unsigned_int_t_t.getCPtr(seeds), hash_num_per_seed), true);
  }

  public SeedRollingHash(String seq, long seq_len, long k, SWIGTYPE_p_std__vectorT_std__string_t seeds, long hash_num_per_seed) {
    this(btllibJNI.new_SeedRollingHash__SWIG_2(seq, seq_len, k, SWIGTYPE_p_std__vectorT_std__string_t.getCPtr(seeds), hash_num_per_seed), true);
  }

  public SeedRollingHash(String seq, long k, SWIGTYPE_p_std__vectorT_std__string_t seeds, long hash_num_per_seed) {
    this(btllibJNI.new_SeedRollingHash__SWIG_3(seq, k, SWIGTYPE_p_std__vectorT_std__string_t.getCPtr(seeds), hash_num_per_seed), true);
  }

  public long get_hash_num_per_seed() {
    return btllibJNI.SeedRollingHash_get_hash_num_per_seed(swigCPtr, this);
  }

  public boolean roll() {
    return btllibJNI.SeedRollingHash_roll(swigCPtr, this);
  }

}
